// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package arbiusrouterv1

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Signature is an auto generated low-level Go binding around an user-defined struct.
type Signature struct {
	Signer    common.Address
	Signature []byte
}

// ArbiusRouterV1MetaData contains all meta data concerning the ArbiusRouterV1 contract.
var ArbiusRouterV1MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"engine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbius_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValidator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignersNotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmitTaskFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimeNotPassed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"taskid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"taskid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValidators\",\"type\":\"uint256\"}],\"name\":\"MinValidatorsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskid_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"addIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbius\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskid_\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"structSignature[]\",\"name\":\"sigs_\",\"type\":\"tuple[]\"}],\"name\":\"claimIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskid_\",\"type\":\"bytes32\"}],\"name\":\"emergencyClaimIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"engine\",\"outputs\":[{\"internalType\":\"contractIArbius\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"incentives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"contractSwapReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contractIUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minValidators_\",\"type\":\"uint256\"}],\"name\":\"setMinValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"model_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"incentive_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas_\",\"type\":\"uint256\"}],\"name\":\"submitTask\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"model_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"incentive_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas_\",\"type\":\"uint256\"}],\"name\":\"submitTaskWithETH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"model_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"incentive_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas_\",\"type\":\"uint256\"}],\"name\":\"submitTaskWithToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"uniswapApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"structSignature[]\",\"name\":\"sigs_\",\"type\":\"tuple[]\"}],\"name\":\"validateSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// ArbiusRouterV1ABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbiusRouterV1MetaData.ABI instead.
var ArbiusRouterV1ABI = ArbiusRouterV1MetaData.ABI

// ArbiusRouterV1Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ArbiusRouterV1MetaData.Bin instead.
var ArbiusRouterV1Bin = ArbiusRouterV1MetaData.Bin

// DeployArbiusRouterV1 deploys a new Ethereum contract, binding an instance of ArbiusRouterV1 to it.
func DeployArbiusRouterV1(auth *bind.TransactOpts, backend bind.ContractBackend, engine_ common.Address, arbius_ common.Address, router_ common.Address, receiver_ common.Address) (common.Address, *types.Transaction, *ArbiusRouterV1, error) {
	parsed, err := ArbiusRouterV1MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ArbiusRouterV1Bin), backend, engine_, arbius_, router_, receiver_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ArbiusRouterV1{ArbiusRouterV1Caller: ArbiusRouterV1Caller{contract: contract}, ArbiusRouterV1Transactor: ArbiusRouterV1Transactor{contract: contract}, ArbiusRouterV1Filterer: ArbiusRouterV1Filterer{contract: contract}}, nil
}

// ArbiusRouterV1 is an auto generated Go binding around an Ethereum contract.
type ArbiusRouterV1 struct {
	ArbiusRouterV1Caller     // Read-only binding to the contract
	ArbiusRouterV1Transactor // Write-only binding to the contract
	ArbiusRouterV1Filterer   // Log filterer for contract events
}

// ArbiusRouterV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type ArbiusRouterV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbiusRouterV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbiusRouterV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbiusRouterV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbiusRouterV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbiusRouterV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbiusRouterV1Session struct {
	Contract     *ArbiusRouterV1   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbiusRouterV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbiusRouterV1CallerSession struct {
	Contract *ArbiusRouterV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// ArbiusRouterV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbiusRouterV1TransactorSession struct {
	Contract     *ArbiusRouterV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ArbiusRouterV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type ArbiusRouterV1Raw struct {
	Contract *ArbiusRouterV1 // Generic contract binding to access the raw methods on
}

// ArbiusRouterV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbiusRouterV1CallerRaw struct {
	Contract *ArbiusRouterV1Caller // Generic read-only contract binding to access the raw methods on
}

// ArbiusRouterV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbiusRouterV1TransactorRaw struct {
	Contract *ArbiusRouterV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewArbiusRouterV1 creates a new instance of ArbiusRouterV1, bound to a specific deployed contract.
func NewArbiusRouterV1(address common.Address, backend bind.ContractBackend) (*ArbiusRouterV1, error) {
	contract, err := bindArbiusRouterV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbiusRouterV1{ArbiusRouterV1Caller: ArbiusRouterV1Caller{contract: contract}, ArbiusRouterV1Transactor: ArbiusRouterV1Transactor{contract: contract}, ArbiusRouterV1Filterer: ArbiusRouterV1Filterer{contract: contract}}, nil
}

// NewArbiusRouterV1Caller creates a new read-only instance of ArbiusRouterV1, bound to a specific deployed contract.
func NewArbiusRouterV1Caller(address common.Address, caller bind.ContractCaller) (*ArbiusRouterV1Caller, error) {
	contract, err := bindArbiusRouterV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbiusRouterV1Caller{contract: contract}, nil
}

// NewArbiusRouterV1Transactor creates a new write-only instance of ArbiusRouterV1, bound to a specific deployed contract.
func NewArbiusRouterV1Transactor(address common.Address, transactor bind.ContractTransactor) (*ArbiusRouterV1Transactor, error) {
	contract, err := bindArbiusRouterV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbiusRouterV1Transactor{contract: contract}, nil
}

// NewArbiusRouterV1Filterer creates a new log filterer instance of ArbiusRouterV1, bound to a specific deployed contract.
func NewArbiusRouterV1Filterer(address common.Address, filterer bind.ContractFilterer) (*ArbiusRouterV1Filterer, error) {
	contract, err := bindArbiusRouterV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbiusRouterV1Filterer{contract: contract}, nil
}

// bindArbiusRouterV1 binds a generic wrapper to an already deployed contract.
func bindArbiusRouterV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbiusRouterV1MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbiusRouterV1 *ArbiusRouterV1Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbiusRouterV1.Contract.ArbiusRouterV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbiusRouterV1 *ArbiusRouterV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.ArbiusRouterV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbiusRouterV1 *ArbiusRouterV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.ArbiusRouterV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbiusRouterV1 *ArbiusRouterV1CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbiusRouterV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.contract.Transact(opts, method, params...)
}

// Arbius is a free data retrieval call binding the contract method 0xe0d61b07.
//
// Solidity: function arbius() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1Caller) Arbius(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbiusRouterV1.contract.Call(opts, &out, "arbius")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Arbius is a free data retrieval call binding the contract method 0xe0d61b07.
//
// Solidity: function arbius() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1Session) Arbius() (common.Address, error) {
	return _ArbiusRouterV1.Contract.Arbius(&_ArbiusRouterV1.CallOpts)
}

// Arbius is a free data retrieval call binding the contract method 0xe0d61b07.
//
// Solidity: function arbius() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1CallerSession) Arbius() (common.Address, error) {
	return _ArbiusRouterV1.Contract.Arbius(&_ArbiusRouterV1.CallOpts)
}

// Engine is a free data retrieval call binding the contract method 0xc9d4623f.
//
// Solidity: function engine() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1Caller) Engine(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbiusRouterV1.contract.Call(opts, &out, "engine")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Engine is a free data retrieval call binding the contract method 0xc9d4623f.
//
// Solidity: function engine() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1Session) Engine() (common.Address, error) {
	return _ArbiusRouterV1.Contract.Engine(&_ArbiusRouterV1.CallOpts)
}

// Engine is a free data retrieval call binding the contract method 0xc9d4623f.
//
// Solidity: function engine() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1CallerSession) Engine() (common.Address, error) {
	return _ArbiusRouterV1.Contract.Engine(&_ArbiusRouterV1.CallOpts)
}

// Incentives is a free data retrieval call binding the contract method 0x60777795.
//
// Solidity: function incentives(bytes32 ) view returns(uint256)
func (_ArbiusRouterV1 *ArbiusRouterV1Caller) Incentives(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _ArbiusRouterV1.contract.Call(opts, &out, "incentives", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Incentives is a free data retrieval call binding the contract method 0x60777795.
//
// Solidity: function incentives(bytes32 ) view returns(uint256)
func (_ArbiusRouterV1 *ArbiusRouterV1Session) Incentives(arg0 [32]byte) (*big.Int, error) {
	return _ArbiusRouterV1.Contract.Incentives(&_ArbiusRouterV1.CallOpts, arg0)
}

// Incentives is a free data retrieval call binding the contract method 0x60777795.
//
// Solidity: function incentives(bytes32 ) view returns(uint256)
func (_ArbiusRouterV1 *ArbiusRouterV1CallerSession) Incentives(arg0 [32]byte) (*big.Int, error) {
	return _ArbiusRouterV1.Contract.Incentives(&_ArbiusRouterV1.CallOpts, arg0)
}

// MinValidators is a free data retrieval call binding the contract method 0xc5ab2241.
//
// Solidity: function minValidators() view returns(uint256)
func (_ArbiusRouterV1 *ArbiusRouterV1Caller) MinValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbiusRouterV1.contract.Call(opts, &out, "minValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinValidators is a free data retrieval call binding the contract method 0xc5ab2241.
//
// Solidity: function minValidators() view returns(uint256)
func (_ArbiusRouterV1 *ArbiusRouterV1Session) MinValidators() (*big.Int, error) {
	return _ArbiusRouterV1.Contract.MinValidators(&_ArbiusRouterV1.CallOpts)
}

// MinValidators is a free data retrieval call binding the contract method 0xc5ab2241.
//
// Solidity: function minValidators() view returns(uint256)
func (_ArbiusRouterV1 *ArbiusRouterV1CallerSession) MinValidators() (*big.Int, error) {
	return _ArbiusRouterV1.Contract.MinValidators(&_ArbiusRouterV1.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbiusRouterV1.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1Session) Owner() (common.Address, error) {
	return _ArbiusRouterV1.Contract.Owner(&_ArbiusRouterV1.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1CallerSession) Owner() (common.Address, error) {
	return _ArbiusRouterV1.Contract.Owner(&_ArbiusRouterV1.CallOpts)
}

// Receiver is a free data retrieval call binding the contract method 0xf7260d3e.
//
// Solidity: function receiver() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1Caller) Receiver(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbiusRouterV1.contract.Call(opts, &out, "receiver")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Receiver is a free data retrieval call binding the contract method 0xf7260d3e.
//
// Solidity: function receiver() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1Session) Receiver() (common.Address, error) {
	return _ArbiusRouterV1.Contract.Receiver(&_ArbiusRouterV1.CallOpts)
}

// Receiver is a free data retrieval call binding the contract method 0xf7260d3e.
//
// Solidity: function receiver() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1CallerSession) Receiver() (common.Address, error) {
	return _ArbiusRouterV1.Contract.Receiver(&_ArbiusRouterV1.CallOpts)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1Caller) Router(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbiusRouterV1.contract.Call(opts, &out, "router")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1Session) Router() (common.Address, error) {
	return _ArbiusRouterV1.Contract.Router(&_ArbiusRouterV1.CallOpts)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_ArbiusRouterV1 *ArbiusRouterV1CallerSession) Router() (common.Address, error) {
	return _ArbiusRouterV1.Contract.Router(&_ArbiusRouterV1.CallOpts)
}

// ValidateSignatures is a free data retrieval call binding the contract method 0xb2867805.
//
// Solidity: function validateSignatures(bytes32 hash_, (address,bytes)[] sigs_) view returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Caller) ValidateSignatures(opts *bind.CallOpts, hash_ [32]byte, sigs_ []Signature) error {
	var out []interface{}
	err := _ArbiusRouterV1.contract.Call(opts, &out, "validateSignatures", hash_, sigs_)

	if err != nil {
		return err
	}

	return err

}

// ValidateSignatures is a free data retrieval call binding the contract method 0xb2867805.
//
// Solidity: function validateSignatures(bytes32 hash_, (address,bytes)[] sigs_) view returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) ValidateSignatures(hash_ [32]byte, sigs_ []Signature) error {
	return _ArbiusRouterV1.Contract.ValidateSignatures(&_ArbiusRouterV1.CallOpts, hash_, sigs_)
}

// ValidateSignatures is a free data retrieval call binding the contract method 0xb2867805.
//
// Solidity: function validateSignatures(bytes32 hash_, (address,bytes)[] sigs_) view returns()
func (_ArbiusRouterV1 *ArbiusRouterV1CallerSession) ValidateSignatures(hash_ [32]byte, sigs_ []Signature) error {
	return _ArbiusRouterV1.Contract.ValidateSignatures(&_ArbiusRouterV1.CallOpts, hash_, sigs_)
}

// Validators is a free data retrieval call binding the contract method 0xfa52c7d8.
//
// Solidity: function validators(address ) view returns(bool)
func (_ArbiusRouterV1 *ArbiusRouterV1Caller) Validators(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ArbiusRouterV1.contract.Call(opts, &out, "validators", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Validators is a free data retrieval call binding the contract method 0xfa52c7d8.
//
// Solidity: function validators(address ) view returns(bool)
func (_ArbiusRouterV1 *ArbiusRouterV1Session) Validators(arg0 common.Address) (bool, error) {
	return _ArbiusRouterV1.Contract.Validators(&_ArbiusRouterV1.CallOpts, arg0)
}

// Validators is a free data retrieval call binding the contract method 0xfa52c7d8.
//
// Solidity: function validators(address ) view returns(bool)
func (_ArbiusRouterV1 *ArbiusRouterV1CallerSession) Validators(arg0 common.Address) (bool, error) {
	return _ArbiusRouterV1.Contract.Validators(&_ArbiusRouterV1.CallOpts, arg0)
}

// AddIncentive is a paid mutator transaction binding the contract method 0xd7f332b6.
//
// Solidity: function addIncentive(bytes32 taskid_, uint256 amount_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) AddIncentive(opts *bind.TransactOpts, taskid_ [32]byte, amount_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "addIncentive", taskid_, amount_)
}

// AddIncentive is a paid mutator transaction binding the contract method 0xd7f332b6.
//
// Solidity: function addIncentive(bytes32 taskid_, uint256 amount_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) AddIncentive(taskid_ [32]byte, amount_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.AddIncentive(&_ArbiusRouterV1.TransactOpts, taskid_, amount_)
}

// AddIncentive is a paid mutator transaction binding the contract method 0xd7f332b6.
//
// Solidity: function addIncentive(bytes32 taskid_, uint256 amount_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) AddIncentive(taskid_ [32]byte, amount_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.AddIncentive(&_ArbiusRouterV1.TransactOpts, taskid_, amount_)
}

// ClaimIncentive is a paid mutator transaction binding the contract method 0xe93ae81c.
//
// Solidity: function claimIncentive(bytes32 taskid_, (address,bytes)[] sigs_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) ClaimIncentive(opts *bind.TransactOpts, taskid_ [32]byte, sigs_ []Signature) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "claimIncentive", taskid_, sigs_)
}

// ClaimIncentive is a paid mutator transaction binding the contract method 0xe93ae81c.
//
// Solidity: function claimIncentive(bytes32 taskid_, (address,bytes)[] sigs_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) ClaimIncentive(taskid_ [32]byte, sigs_ []Signature) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.ClaimIncentive(&_ArbiusRouterV1.TransactOpts, taskid_, sigs_)
}

// ClaimIncentive is a paid mutator transaction binding the contract method 0xe93ae81c.
//
// Solidity: function claimIncentive(bytes32 taskid_, (address,bytes)[] sigs_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) ClaimIncentive(taskid_ [32]byte, sigs_ []Signature) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.ClaimIncentive(&_ArbiusRouterV1.TransactOpts, taskid_, sigs_)
}

// EmergencyClaimIncentive is a paid mutator transaction binding the contract method 0x297035b3.
//
// Solidity: function emergencyClaimIncentive(bytes32 taskid_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) EmergencyClaimIncentive(opts *bind.TransactOpts, taskid_ [32]byte) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "emergencyClaimIncentive", taskid_)
}

// EmergencyClaimIncentive is a paid mutator transaction binding the contract method 0x297035b3.
//
// Solidity: function emergencyClaimIncentive(bytes32 taskid_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) EmergencyClaimIncentive(taskid_ [32]byte) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.EmergencyClaimIncentive(&_ArbiusRouterV1.TransactOpts, taskid_)
}

// EmergencyClaimIncentive is a paid mutator transaction binding the contract method 0x297035b3.
//
// Solidity: function emergencyClaimIncentive(bytes32 taskid_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) EmergencyClaimIncentive(taskid_ [32]byte) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.EmergencyClaimIncentive(&_ArbiusRouterV1.TransactOpts, taskid_)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) RenounceOwnership() (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.RenounceOwnership(&_ArbiusRouterV1.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.RenounceOwnership(&_ArbiusRouterV1.TransactOpts)
}

// SetMinValidators is a paid mutator transaction binding the contract method 0x79dfe40c.
//
// Solidity: function setMinValidators(uint256 minValidators_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) SetMinValidators(opts *bind.TransactOpts, minValidators_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "setMinValidators", minValidators_)
}

// SetMinValidators is a paid mutator transaction binding the contract method 0x79dfe40c.
//
// Solidity: function setMinValidators(uint256 minValidators_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) SetMinValidators(minValidators_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.SetMinValidators(&_ArbiusRouterV1.TransactOpts, minValidators_)
}

// SetMinValidators is a paid mutator transaction binding the contract method 0x79dfe40c.
//
// Solidity: function setMinValidators(uint256 minValidators_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) SetMinValidators(minValidators_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.SetMinValidators(&_ArbiusRouterV1.TransactOpts, minValidators_)
}

// SetValidator is a paid mutator transaction binding the contract method 0x4623c91d.
//
// Solidity: function setValidator(address validator_, bool status_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) SetValidator(opts *bind.TransactOpts, validator_ common.Address, status_ bool) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "setValidator", validator_, status_)
}

// SetValidator is a paid mutator transaction binding the contract method 0x4623c91d.
//
// Solidity: function setValidator(address validator_, bool status_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) SetValidator(validator_ common.Address, status_ bool) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.SetValidator(&_ArbiusRouterV1.TransactOpts, validator_, status_)
}

// SetValidator is a paid mutator transaction binding the contract method 0x4623c91d.
//
// Solidity: function setValidator(address validator_, bool status_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) SetValidator(validator_ common.Address, status_ bool) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.SetValidator(&_ArbiusRouterV1.TransactOpts, validator_, status_)
}

// SubmitTask is a paid mutator transaction binding the contract method 0xfb53f5b1.
//
// Solidity: function submitTask(uint8 version_, address owner_, bytes32 model_, uint256 fee_, bytes input_, uint256 incentive_, uint256 gas_) returns(bytes32)
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) SubmitTask(opts *bind.TransactOpts, version_ uint8, owner_ common.Address, model_ [32]byte, fee_ *big.Int, input_ []byte, incentive_ *big.Int, gas_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "submitTask", version_, owner_, model_, fee_, input_, incentive_, gas_)
}

// SubmitTask is a paid mutator transaction binding the contract method 0xfb53f5b1.
//
// Solidity: function submitTask(uint8 version_, address owner_, bytes32 model_, uint256 fee_, bytes input_, uint256 incentive_, uint256 gas_) returns(bytes32)
func (_ArbiusRouterV1 *ArbiusRouterV1Session) SubmitTask(version_ uint8, owner_ common.Address, model_ [32]byte, fee_ *big.Int, input_ []byte, incentive_ *big.Int, gas_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.SubmitTask(&_ArbiusRouterV1.TransactOpts, version_, owner_, model_, fee_, input_, incentive_, gas_)
}

// SubmitTask is a paid mutator transaction binding the contract method 0xfb53f5b1.
//
// Solidity: function submitTask(uint8 version_, address owner_, bytes32 model_, uint256 fee_, bytes input_, uint256 incentive_, uint256 gas_) returns(bytes32)
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) SubmitTask(version_ uint8, owner_ common.Address, model_ [32]byte, fee_ *big.Int, input_ []byte, incentive_ *big.Int, gas_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.SubmitTask(&_ArbiusRouterV1.TransactOpts, version_, owner_, model_, fee_, input_, incentive_, gas_)
}

// SubmitTaskWithETH is a paid mutator transaction binding the contract method 0x1cec43ba.
//
// Solidity: function submitTaskWithETH(uint8 version_, address owner_, bytes32 model_, uint256 fee_, bytes input_, uint256 incentive_, uint256 gas_) payable returns(bytes32)
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) SubmitTaskWithETH(opts *bind.TransactOpts, version_ uint8, owner_ common.Address, model_ [32]byte, fee_ *big.Int, input_ []byte, incentive_ *big.Int, gas_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "submitTaskWithETH", version_, owner_, model_, fee_, input_, incentive_, gas_)
}

// SubmitTaskWithETH is a paid mutator transaction binding the contract method 0x1cec43ba.
//
// Solidity: function submitTaskWithETH(uint8 version_, address owner_, bytes32 model_, uint256 fee_, bytes input_, uint256 incentive_, uint256 gas_) payable returns(bytes32)
func (_ArbiusRouterV1 *ArbiusRouterV1Session) SubmitTaskWithETH(version_ uint8, owner_ common.Address, model_ [32]byte, fee_ *big.Int, input_ []byte, incentive_ *big.Int, gas_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.SubmitTaskWithETH(&_ArbiusRouterV1.TransactOpts, version_, owner_, model_, fee_, input_, incentive_, gas_)
}

// SubmitTaskWithETH is a paid mutator transaction binding the contract method 0x1cec43ba.
//
// Solidity: function submitTaskWithETH(uint8 version_, address owner_, bytes32 model_, uint256 fee_, bytes input_, uint256 incentive_, uint256 gas_) payable returns(bytes32)
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) SubmitTaskWithETH(version_ uint8, owner_ common.Address, model_ [32]byte, fee_ *big.Int, input_ []byte, incentive_ *big.Int, gas_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.SubmitTaskWithETH(&_ArbiusRouterV1.TransactOpts, version_, owner_, model_, fee_, input_, incentive_, gas_)
}

// SubmitTaskWithToken is a paid mutator transaction binding the contract method 0x739edcbe.
//
// Solidity: function submitTaskWithToken(uint8 version_, address owner_, bytes32 model_, uint256 fee_, bytes input_, uint256 incentive_, address token_, uint256 amountInMax_, uint256 gas_) returns(bytes32)
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) SubmitTaskWithToken(opts *bind.TransactOpts, version_ uint8, owner_ common.Address, model_ [32]byte, fee_ *big.Int, input_ []byte, incentive_ *big.Int, token_ common.Address, amountInMax_ *big.Int, gas_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "submitTaskWithToken", version_, owner_, model_, fee_, input_, incentive_, token_, amountInMax_, gas_)
}

// SubmitTaskWithToken is a paid mutator transaction binding the contract method 0x739edcbe.
//
// Solidity: function submitTaskWithToken(uint8 version_, address owner_, bytes32 model_, uint256 fee_, bytes input_, uint256 incentive_, address token_, uint256 amountInMax_, uint256 gas_) returns(bytes32)
func (_ArbiusRouterV1 *ArbiusRouterV1Session) SubmitTaskWithToken(version_ uint8, owner_ common.Address, model_ [32]byte, fee_ *big.Int, input_ []byte, incentive_ *big.Int, token_ common.Address, amountInMax_ *big.Int, gas_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.SubmitTaskWithToken(&_ArbiusRouterV1.TransactOpts, version_, owner_, model_, fee_, input_, incentive_, token_, amountInMax_, gas_)
}

// SubmitTaskWithToken is a paid mutator transaction binding the contract method 0x739edcbe.
//
// Solidity: function submitTaskWithToken(uint8 version_, address owner_, bytes32 model_, uint256 fee_, bytes input_, uint256 incentive_, address token_, uint256 amountInMax_, uint256 gas_) returns(bytes32)
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) SubmitTaskWithToken(version_ uint8, owner_ common.Address, model_ [32]byte, fee_ *big.Int, input_ []byte, incentive_ *big.Int, token_ common.Address, amountInMax_ *big.Int, gas_ *big.Int) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.SubmitTaskWithToken(&_ArbiusRouterV1.TransactOpts, version_, owner_, model_, fee_, input_, incentive_, token_, amountInMax_, gas_)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.TransferOwnership(&_ArbiusRouterV1.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.TransferOwnership(&_ArbiusRouterV1.TransactOpts, newOwner)
}

// UniswapApprove is a paid mutator transaction binding the contract method 0x91067f90.
//
// Solidity: function uniswapApprove(address token_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) UniswapApprove(opts *bind.TransactOpts, token_ common.Address) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "uniswapApprove", token_)
}

// UniswapApprove is a paid mutator transaction binding the contract method 0x91067f90.
//
// Solidity: function uniswapApprove(address token_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) UniswapApprove(token_ common.Address) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.UniswapApprove(&_ArbiusRouterV1.TransactOpts, token_)
}

// UniswapApprove is a paid mutator transaction binding the contract method 0x91067f90.
//
// Solidity: function uniswapApprove(address token_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) UniswapApprove(token_ common.Address) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.UniswapApprove(&_ArbiusRouterV1.TransactOpts, token_)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address token_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) Withdraw(opts *bind.TransactOpts, token_ common.Address) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "withdraw", token_)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address token_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) Withdraw(token_ common.Address) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.Withdraw(&_ArbiusRouterV1.TransactOpts, token_)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address token_) returns()
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) Withdraw(token_ common.Address) (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.Withdraw(&_ArbiusRouterV1.TransactOpts, token_)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0xe086e5ec.
//
// Solidity: function withdrawETH() returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) WithdrawETH(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.Transact(opts, "withdrawETH")
}

// WithdrawETH is a paid mutator transaction binding the contract method 0xe086e5ec.
//
// Solidity: function withdrawETH() returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) WithdrawETH() (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.WithdrawETH(&_ArbiusRouterV1.TransactOpts)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0xe086e5ec.
//
// Solidity: function withdrawETH() returns()
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) WithdrawETH() (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.WithdrawETH(&_ArbiusRouterV1.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Transactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbiusRouterV1.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ArbiusRouterV1 *ArbiusRouterV1Session) Receive() (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.Receive(&_ArbiusRouterV1.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ArbiusRouterV1 *ArbiusRouterV1TransactorSession) Receive() (*types.Transaction, error) {
	return _ArbiusRouterV1.Contract.Receive(&_ArbiusRouterV1.TransactOpts)
}

// ArbiusRouterV1IncentiveAddedIterator is returned from FilterIncentiveAdded and is used to iterate over the raw logs and unpacked data for IncentiveAdded events raised by the ArbiusRouterV1 contract.
type ArbiusRouterV1IncentiveAddedIterator struct {
	Event *ArbiusRouterV1IncentiveAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbiusRouterV1IncentiveAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbiusRouterV1IncentiveAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbiusRouterV1IncentiveAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbiusRouterV1IncentiveAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbiusRouterV1IncentiveAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbiusRouterV1IncentiveAdded represents a IncentiveAdded event raised by the ArbiusRouterV1 contract.
type ArbiusRouterV1IncentiveAdded struct {
	Taskid [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterIncentiveAdded is a free log retrieval operation binding the contract event 0x19d4213c1f22deb153156be5bf9eee8fe77c36a557d83434b8cbb543fc034d6a.
//
// Solidity: event IncentiveAdded(bytes32 indexed taskid, uint256 amount)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) FilterIncentiveAdded(opts *bind.FilterOpts, taskid [][32]byte) (*ArbiusRouterV1IncentiveAddedIterator, error) {

	var taskidRule []interface{}
	for _, taskidItem := range taskid {
		taskidRule = append(taskidRule, taskidItem)
	}

	logs, sub, err := _ArbiusRouterV1.contract.FilterLogs(opts, "IncentiveAdded", taskidRule)
	if err != nil {
		return nil, err
	}
	return &ArbiusRouterV1IncentiveAddedIterator{contract: _ArbiusRouterV1.contract, event: "IncentiveAdded", logs: logs, sub: sub}, nil
}

// WatchIncentiveAdded is a free log subscription operation binding the contract event 0x19d4213c1f22deb153156be5bf9eee8fe77c36a557d83434b8cbb543fc034d6a.
//
// Solidity: event IncentiveAdded(bytes32 indexed taskid, uint256 amount)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) WatchIncentiveAdded(opts *bind.WatchOpts, sink chan<- *ArbiusRouterV1IncentiveAdded, taskid [][32]byte) (event.Subscription, error) {

	var taskidRule []interface{}
	for _, taskidItem := range taskid {
		taskidRule = append(taskidRule, taskidItem)
	}

	logs, sub, err := _ArbiusRouterV1.contract.WatchLogs(opts, "IncentiveAdded", taskidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbiusRouterV1IncentiveAdded)
				if err := _ArbiusRouterV1.contract.UnpackLog(event, "IncentiveAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncentiveAdded is a log parse operation binding the contract event 0x19d4213c1f22deb153156be5bf9eee8fe77c36a557d83434b8cbb543fc034d6a.
//
// Solidity: event IncentiveAdded(bytes32 indexed taskid, uint256 amount)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) ParseIncentiveAdded(log types.Log) (*ArbiusRouterV1IncentiveAdded, error) {
	event := new(ArbiusRouterV1IncentiveAdded)
	if err := _ArbiusRouterV1.contract.UnpackLog(event, "IncentiveAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbiusRouterV1IncentiveClaimedIterator is returned from FilterIncentiveClaimed and is used to iterate over the raw logs and unpacked data for IncentiveClaimed events raised by the ArbiusRouterV1 contract.
type ArbiusRouterV1IncentiveClaimedIterator struct {
	Event *ArbiusRouterV1IncentiveClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbiusRouterV1IncentiveClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbiusRouterV1IncentiveClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbiusRouterV1IncentiveClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbiusRouterV1IncentiveClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbiusRouterV1IncentiveClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbiusRouterV1IncentiveClaimed represents a IncentiveClaimed event raised by the ArbiusRouterV1 contract.
type ArbiusRouterV1IncentiveClaimed struct {
	Taskid    [32]byte
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterIncentiveClaimed is a free log retrieval operation binding the contract event 0x8c8fb16c3fff3e9353f4a39b33dd9e38ba88594f8c66defbff2048265738780b.
//
// Solidity: event IncentiveClaimed(bytes32 indexed taskid, address indexed recipient, uint256 amount)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) FilterIncentiveClaimed(opts *bind.FilterOpts, taskid [][32]byte, recipient []common.Address) (*ArbiusRouterV1IncentiveClaimedIterator, error) {

	var taskidRule []interface{}
	for _, taskidItem := range taskid {
		taskidRule = append(taskidRule, taskidItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ArbiusRouterV1.contract.FilterLogs(opts, "IncentiveClaimed", taskidRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &ArbiusRouterV1IncentiveClaimedIterator{contract: _ArbiusRouterV1.contract, event: "IncentiveClaimed", logs: logs, sub: sub}, nil
}

// WatchIncentiveClaimed is a free log subscription operation binding the contract event 0x8c8fb16c3fff3e9353f4a39b33dd9e38ba88594f8c66defbff2048265738780b.
//
// Solidity: event IncentiveClaimed(bytes32 indexed taskid, address indexed recipient, uint256 amount)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) WatchIncentiveClaimed(opts *bind.WatchOpts, sink chan<- *ArbiusRouterV1IncentiveClaimed, taskid [][32]byte, recipient []common.Address) (event.Subscription, error) {

	var taskidRule []interface{}
	for _, taskidItem := range taskid {
		taskidRule = append(taskidRule, taskidItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ArbiusRouterV1.contract.WatchLogs(opts, "IncentiveClaimed", taskidRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbiusRouterV1IncentiveClaimed)
				if err := _ArbiusRouterV1.contract.UnpackLog(event, "IncentiveClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncentiveClaimed is a log parse operation binding the contract event 0x8c8fb16c3fff3e9353f4a39b33dd9e38ba88594f8c66defbff2048265738780b.
//
// Solidity: event IncentiveClaimed(bytes32 indexed taskid, address indexed recipient, uint256 amount)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) ParseIncentiveClaimed(log types.Log) (*ArbiusRouterV1IncentiveClaimed, error) {
	event := new(ArbiusRouterV1IncentiveClaimed)
	if err := _ArbiusRouterV1.contract.UnpackLog(event, "IncentiveClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbiusRouterV1MinValidatorsSetIterator is returned from FilterMinValidatorsSet and is used to iterate over the raw logs and unpacked data for MinValidatorsSet events raised by the ArbiusRouterV1 contract.
type ArbiusRouterV1MinValidatorsSetIterator struct {
	Event *ArbiusRouterV1MinValidatorsSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbiusRouterV1MinValidatorsSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbiusRouterV1MinValidatorsSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbiusRouterV1MinValidatorsSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbiusRouterV1MinValidatorsSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbiusRouterV1MinValidatorsSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbiusRouterV1MinValidatorsSet represents a MinValidatorsSet event raised by the ArbiusRouterV1 contract.
type ArbiusRouterV1MinValidatorsSet struct {
	MinValidators *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterMinValidatorsSet is a free log retrieval operation binding the contract event 0xbcfae85be40ac3606c557faf143ce6b08c7d99137b0c98eff034fddc6926c31b.
//
// Solidity: event MinValidatorsSet(uint256 minValidators)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) FilterMinValidatorsSet(opts *bind.FilterOpts) (*ArbiusRouterV1MinValidatorsSetIterator, error) {

	logs, sub, err := _ArbiusRouterV1.contract.FilterLogs(opts, "MinValidatorsSet")
	if err != nil {
		return nil, err
	}
	return &ArbiusRouterV1MinValidatorsSetIterator{contract: _ArbiusRouterV1.contract, event: "MinValidatorsSet", logs: logs, sub: sub}, nil
}

// WatchMinValidatorsSet is a free log subscription operation binding the contract event 0xbcfae85be40ac3606c557faf143ce6b08c7d99137b0c98eff034fddc6926c31b.
//
// Solidity: event MinValidatorsSet(uint256 minValidators)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) WatchMinValidatorsSet(opts *bind.WatchOpts, sink chan<- *ArbiusRouterV1MinValidatorsSet) (event.Subscription, error) {

	logs, sub, err := _ArbiusRouterV1.contract.WatchLogs(opts, "MinValidatorsSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbiusRouterV1MinValidatorsSet)
				if err := _ArbiusRouterV1.contract.UnpackLog(event, "MinValidatorsSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinValidatorsSet is a log parse operation binding the contract event 0xbcfae85be40ac3606c557faf143ce6b08c7d99137b0c98eff034fddc6926c31b.
//
// Solidity: event MinValidatorsSet(uint256 minValidators)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) ParseMinValidatorsSet(log types.Log) (*ArbiusRouterV1MinValidatorsSet, error) {
	event := new(ArbiusRouterV1MinValidatorsSet)
	if err := _ArbiusRouterV1.contract.UnpackLog(event, "MinValidatorsSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbiusRouterV1OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ArbiusRouterV1 contract.
type ArbiusRouterV1OwnershipTransferredIterator struct {
	Event *ArbiusRouterV1OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbiusRouterV1OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbiusRouterV1OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbiusRouterV1OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbiusRouterV1OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbiusRouterV1OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbiusRouterV1OwnershipTransferred represents a OwnershipTransferred event raised by the ArbiusRouterV1 contract.
type ArbiusRouterV1OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ArbiusRouterV1OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ArbiusRouterV1.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ArbiusRouterV1OwnershipTransferredIterator{contract: _ArbiusRouterV1.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ArbiusRouterV1OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ArbiusRouterV1.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbiusRouterV1OwnershipTransferred)
				if err := _ArbiusRouterV1.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) ParseOwnershipTransferred(log types.Log) (*ArbiusRouterV1OwnershipTransferred, error) {
	event := new(ArbiusRouterV1OwnershipTransferred)
	if err := _ArbiusRouterV1.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbiusRouterV1ValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the ArbiusRouterV1 contract.
type ArbiusRouterV1ValidatorSetIterator struct {
	Event *ArbiusRouterV1ValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbiusRouterV1ValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbiusRouterV1ValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbiusRouterV1ValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbiusRouterV1ValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbiusRouterV1ValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbiusRouterV1ValidatorSet represents a ValidatorSet event raised by the ArbiusRouterV1 contract.
type ArbiusRouterV1ValidatorSet struct {
	Validator common.Address
	Status    bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x6b3b7d0d26ec99d080840dca1323c7147d1868adc66a4290afb8101d7908320d.
//
// Solidity: event ValidatorSet(address indexed validator, bool status)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) FilterValidatorSet(opts *bind.FilterOpts, validator []common.Address) (*ArbiusRouterV1ValidatorSetIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ArbiusRouterV1.contract.FilterLogs(opts, "ValidatorSet", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ArbiusRouterV1ValidatorSetIterator{contract: _ArbiusRouterV1.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x6b3b7d0d26ec99d080840dca1323c7147d1868adc66a4290afb8101d7908320d.
//
// Solidity: event ValidatorSet(address indexed validator, bool status)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ArbiusRouterV1ValidatorSet, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ArbiusRouterV1.contract.WatchLogs(opts, "ValidatorSet", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbiusRouterV1ValidatorSet)
				if err := _ArbiusRouterV1.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x6b3b7d0d26ec99d080840dca1323c7147d1868adc66a4290afb8101d7908320d.
//
// Solidity: event ValidatorSet(address indexed validator, bool status)
func (_ArbiusRouterV1 *ArbiusRouterV1Filterer) ParseValidatorSet(log types.Log) (*ArbiusRouterV1ValidatorSet, error) {
	event := new(ArbiusRouterV1ValidatorSet)
	if err := _ArbiusRouterV1.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
